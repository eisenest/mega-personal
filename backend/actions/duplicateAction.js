export const duplicateAction = {
    actionType: 'record',
    icon: 'Copy',
    guard: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?',
    isVisible: true,
    component: false, // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –±–µ–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ UI

    handler: async (request, response, context) => {
        const { record, h, resource, currentAdmin } = context
        if (!record) throw new Error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

        try {
            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—è –∫–∞–∫ –µ—Å—Ç—å
            const data = { ...record.params }

            // ‚ùå –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
            delete data._id
            delete data.id
            delete data.createdAt
            delete data.updatedAt
            delete data.uploadImage // –ø–æ–ª–µ input[type=file], –Ω–µ –Ω—É–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å

            // üîÅ –ì–µ–Ω–µ—Ä–∏–º –Ω–æ–≤—ã–π slug
            const timestamp = Date.now()
            if (typeof data.slug === 'string' && data.slug.length > 0) {
                data.slug = `${data.slug}-copy-${timestamp}`
            } else {
                const fallback = data.title || 'article'
                data.slug = `${fallback.toString().toLowerCase().replace(/\s+/g, '-')}-copy-${timestamp}`
            }

            // ‚úèÔ∏è –î–æ–±–∞–≤–∏–º –ø–æ–º–µ—Ç–∫—É "(–∫–æ–ø–∏—è)" –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (data.title) {
                data.title = `${data.title} (–∫–æ–ø–∏—è)`
            }

            // üß™ –ú–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            // console.log('üìã –î—É–±–ª–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å –ø–æ–ª—è–º–∏:', data)

            const newDoc = await resource.create(data)
            const newRecord = resource.build(newDoc)

            return {
                record: newRecord.toJSON(currentAdmin),
                redirectUrl: h.recordActionUrl({
                    resourceId: resource._decorated?.id?.() || resource.id(),
                    recordId: newRecord.id(),
                    actionName: 'edit',
                }),
                notice: {
                    message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∞',
                    type: 'success',
                },
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
            return {
                notice: {
                    message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: ${error.message}`,
                    type: 'error',
                },
            }
        }
    },
}
